// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/filesync.proto

package filesync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSyncService_SyncRecords_FullMethodName  = "/filesync.FileSyncService/SyncRecords"
	FileSyncService_UploadFile_FullMethodName   = "/filesync.FileSyncService/UploadFile"
	FileSyncService_DownloadFile_FullMethodName = "/filesync.FileSyncService/DownloadFile"
)

// FileSyncServiceClient is the client API for FileSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис синхронизации файлов.
type FileSyncServiceClient interface {
	// Синхронизация метаданных: клиент отправляет записи, сервер возвращает, какие файлы нужно загрузить в обе стороны.
	SyncRecords(ctx context.Context, in *SyncRecordsRequest, opts ...grpc.CallOption) (*SyncRecordsResponse, error)
	// Загрузка файла: клиент стримит данные (чанки файла) на сервер.
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, FileUploadResponse], error)
	// Скачивание файла: клиент запрашивает файл по ID, сервер стримит файл чанками.
	DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
}

type fileSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSyncServiceClient(cc grpc.ClientConnInterface) FileSyncServiceClient {
	return &fileSyncServiceClient{cc}
}

func (c *fileSyncServiceClient) SyncRecords(ctx context.Context, in *SyncRecordsRequest, opts ...grpc.CallOption) (*SyncRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncRecordsResponse)
	err := c.cc.Invoke(ctx, FileSyncService_SyncRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, FileUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[0], FileSyncService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, FileUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_UploadFileClient = grpc.ClientStreamingClient[FileChunk, FileUploadResponse]

func (c *fileSyncServiceClient) DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[1], FileSyncService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileDownloadRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_DownloadFileClient = grpc.ServerStreamingClient[FileChunk]

// FileSyncServiceServer is the server API for FileSyncService service.
// All implementations must embed UnimplementedFileSyncServiceServer
// for forward compatibility.
//
// Сервис синхронизации файлов.
type FileSyncServiceServer interface {
	// Синхронизация метаданных: клиент отправляет записи, сервер возвращает, какие файлы нужно загрузить в обе стороны.
	SyncRecords(context.Context, *SyncRecordsRequest) (*SyncRecordsResponse, error)
	// Загрузка файла: клиент стримит данные (чанки файла) на сервер.
	UploadFile(grpc.ClientStreamingServer[FileChunk, FileUploadResponse]) error
	// Скачивание файла: клиент запрашивает файл по ID, сервер стримит файл чанками.
	DownloadFile(*FileDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error
	mustEmbedUnimplementedFileSyncServiceServer()
}

// UnimplementedFileSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSyncServiceServer struct{}

func (UnimplementedFileSyncServiceServer) SyncRecords(context.Context, *SyncRecordsRequest) (*SyncRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRecords not implemented")
}
func (UnimplementedFileSyncServiceServer) UploadFile(grpc.ClientStreamingServer[FileChunk, FileUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileSyncServiceServer) DownloadFile(*FileDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileSyncServiceServer) mustEmbedUnimplementedFileSyncServiceServer() {}
func (UnimplementedFileSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeFileSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSyncServiceServer will
// result in compilation errors.
type UnsafeFileSyncServiceServer interface {
	mustEmbedUnimplementedFileSyncServiceServer()
}

func RegisterFileSyncServiceServer(s grpc.ServiceRegistrar, srv FileSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSyncService_ServiceDesc, srv)
}

func _FileSyncService_SyncRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServiceServer).SyncRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSyncService_SyncRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServiceServer).SyncRecords(ctx, req.(*SyncRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSyncService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServiceServer).UploadFile(&grpc.GenericServerStream[FileChunk, FileUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_UploadFileServer = grpc.ClientStreamingServer[FileChunk, FileUploadResponse]

func _FileSyncService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSyncServiceServer).DownloadFile(m, &grpc.GenericServerStream[FileDownloadRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_DownloadFileServer = grpc.ServerStreamingServer[FileChunk]

// FileSyncService_ServiceDesc is the grpc.ServiceDesc for FileSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesync.FileSyncService",
	HandlerType: (*FileSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncRecords",
			Handler:    _FileSyncService_SyncRecords_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileSyncService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileSyncService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/filesync.proto",
}
